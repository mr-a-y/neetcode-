class Solution {
    public boolean isValidSudoku(char[][] board) {
        int a = 0;

        Map<Integer, Set<Character>> cols = new HashMap<>();
        Map<Integer, Set<Character>> rows = new HashMap<>();
        Map<Integer, Set<Character>> squares = new HashMap<>();

        for (int row = 0; row < 9; row++) {
            for (int col = 0; col < 9; col++) {
                if (row < 3) {
                    if (col < 3) {
                        a = 1;
                    } else if (col < 6) {
                        a = 2;
                    } else {
                        a = 3;
                    }
                } else if (row < 6) {
                    if (col < 3) {
                        a = 4;
                    } else if (col < 6) {
                        a = 5;
                    } else {
                        a = 6;
                    }
                } else {
                    if (col < 3) {
                        a = 7;
                    } else if (col < 6) {
                        a = 8;
                    } else {
                        a = 9;
                    }
                }

                if (board[row][col] == '.') {
                    continue;
                }

                if (!check(board, cols, rows, squares, row, col, a)) {
                    return false;
                }

                cols.computeIfAbsent(col, k -> new HashSet<>()).add(board[row][col]);
                rows.computeIfAbsent(row, k -> new HashSet<>()).add(board[row][col]);
                squares.computeIfAbsent(a, k -> new HashSet<>()).add(board[row][col]);
            }
        }

        return true;
    }

    public boolean check(char[][] board, Map<Integer, Set<Character>> cols, Map<Integer, Set<Character>> rows, Map<Integer, Set<Character>> squares, int row, int col, int a) {
        if (rows.getOrDefault(row, new HashSet<>()).contains(board[row][col])) {
            return false;
        } else if (cols.getOrDefault(col, new HashSet<>()).contains(board[row][col])) {
            return false;
        } else if (squares.getOrDefault(a, new HashSet<>()).contains(board[row][col])) {
            return false;
        }

        return true;
    }
}
